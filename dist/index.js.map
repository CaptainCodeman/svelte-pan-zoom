{"version":3,"sources":["../src/lib/panzoom.ts"],"sourcesContent":["// some basic 2d geometry\nconst distance = (p1: DOMPoint, p2: DOMPoint) => Math.hypot(p1.x - p2.x, p1.y - p2.y)\nconst midpoint = (p1: DOMPoint, p2: DOMPoint) => <DOMPoint>{ x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 }\nconst subtract = (p1: DOMPoint, p2: DOMPoint) => <DOMPoint>{ x: p1.x - p2.x, y: p1.y - p2.y }\n\ntype Render = (ctx: CanvasRenderingContext2D) => void\nexport interface Options {\n  width: number\n  height: number\n  render: Render\n  padding?: number\n  maxZoom?: number\n}\n\nexport function panzoom(canvas: HTMLCanvasElement, options: Options) {\n  const dpr = window.devicePixelRatio\n  const ctx = canvas.getContext('2d')!\n\n  let minZoom: number\n  let width: number\n  let height: number\n  let render: Render\n  let padding: number\n  let maxZoom: number\n  let view_width = canvas.width = canvas.clientWidth * dpr\n  let view_height = canvas.height = canvas.clientHeight * dpr\n\n  function initialize(options: Options) {\n    ({ width, height, render, padding, maxZoom } = { padding: 0, maxZoom: 16, ...options })\n\n    minZoom = Math.min(\n      canvas.width / (width + (padding * dpr)),\n      canvas.height / (height + (padding * dpr))\n    )\n\n    // transform so that 0, 0 is center of image in center of canvas\n    ctx.resetTransform()\n    ctx.translate(canvas.width / 2, canvas.height / 2)\n    ctx.scale(minZoom, minZoom)\n    ctx.translate(-width / 2, -height / 2)\n  }\n\n  initialize(options)\n\n  // handle canvas size changing, keep image centered\n  const resize_observer = new ResizeObserver(nodes => {\n    const rect = nodes[0].contentRect\n\n    const prev = toImageSpace(new DOMPoint(view_width / 2, view_height / 2))\n    const transform = ctx.getTransform()\n\n    view_width = rect.width * dpr\n    view_height = rect.height * dpr\n\n    canvas.width = view_width\n    canvas.height = view_height\n\n    minZoom = Math.min(\n      canvas.width / (options.width + (padding * dpr)),\n      canvas.height / (options.height + (padding * dpr))\n    )\n\n    ctx.setTransform(transform)\n\n    const middle = toImageSpace(new DOMPoint(canvas.width / 2, canvas.height / 2))\n    ctx.translate(middle.x - prev.x, middle.y - prev.y)\n\n    rerender()\n  })\n\n  resize_observer.observe(canvas)\n\n  // active pointer count and positions\n  const pointers = new Map<number, DOMPoint>()\n\n  function onpointerdown(event: PointerEvent) {\n    event.stopPropagation()\n    canvas.setPointerCapture(event.pointerId)\n\n    const point = pointFromEvent(event)\n    pointers.set(event.pointerId, point)\n  }\n\n  function onpointerend(event: PointerEvent) {\n    event.stopPropagation()\n    canvas.releasePointerCapture(event.pointerId)\n\n    pointers.delete(event.pointerId)\n    // TODO: add momentum scrolling ...\n  }\n\n  function onpointermove(event: PointerEvent) {\n    event.stopPropagation()\n\n    // ignore if pointer not pressed\n    if (!pointers.has(event.pointerId)) return\n\n    const point = pointFromEvent(event)\n\n    switch (pointers.size) {\n      // single pointer move (pan)\n      case 1: {\n        const prev = pointers.get(event.pointerId)!\n        const diff = subtract(toImageSpace(point), toImageSpace(prev))\n\n        moveBy(diff)\n        rerender()\n\n        pointers.set(event.pointerId, point)\n\n        break\n      }\n      // two pointer move (pinch zoom _and_ pan)\n      case 2: {\n        const prev_points = [...pointers.values()]\n        const prev_p1 = toImageSpace(prev_points[0])\n        const prev_p2 = toImageSpace(prev_points[1])\n        const prev_middle = midpoint(prev_p1, prev_p2)\n        const prev_dist = distance(prev_p1, prev_p2)\n\n        pointers.set(event.pointerId, point)\n\n        const points = [...pointers.values()]\n        const p1 = toImageSpace(points[0])\n        const p2 = toImageSpace(points[1])\n        const middle = midpoint(p1, p2)\n        const dist = distance(p1, p2)\n\n        // move by distance that midpoint moved\n        const diff = subtract(middle, prev_middle)\n        moveBy(diff)\n\n        // zoom by ratio of pinch sizes, on current middle\n        const zoom = dist / prev_dist\n        zoomOn(middle, zoom)\n\n        break\n      }\n    }\n  }\n\n  function onwheel(event: WheelEvent) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    const point = pointFromEvent(event)\n    const z = Math.exp(-event.deltaY / 512)\n\n    zoomOn(toImageSpace(point), z)\n  }\n\n  function moveBy(delta: DOMPoint) {\n    ctx.translate(delta.x, delta.y)\n  }\n\n  function zoomOn(point: DOMPoint, zoom: number) {\n    function scale(value: number) {\n      ctx.translate(point.x, point.y)\n      ctx.scale(value, value)\n      ctx.translate(-point.x, -point.y)\n    }\n\n    scale(zoom)\n\n    const transform = ctx.getTransform()\n    const min_scale = minZoom\n    const max_scale = maxZoom\n\n    // limit min zoom to initial image size\n    if (transform.a < min_scale) {\n      scale(min_scale / transform.a)\n    }\n\n    // limit max zoom to \"OMG, I see the pixels so large!\"\n    if (transform.a > max_scale) {\n      scale(max_scale / transform.a)\n    }\n\n    rerender()\n  }\n\n  function pointFromEvent(event: PointerEvent | WheelEvent): DOMPoint {\n    const x = event.offsetX * dpr\n    const y = event.offsetY * dpr\n\n    // point is in canvas space\n    return new DOMPoint(x, y)\n  }\n\n  function toImageSpace(point: DOMPoint): DOMPoint {\n    const inverse = ctx.getTransform().inverse()\n    return inverse.transformPoint(point)\n  }\n\n  function rerender() {\n    ctx.save()\n    ctx.resetTransform()\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    ctx.restore()\n\n    render(ctx)\n  }\n\n  canvas.addEventListener('pointerdown', onpointerdown, { passive: true })\n  canvas.addEventListener('pointerup', onpointerend, { passive: true })\n  canvas.addEventListener('pointercancel', onpointerend, { passive: true })\n  canvas.addEventListener('pointermove', onpointermove, { passive: true })\n  canvas.addEventListener('wheel', onwheel)\n\n  return {\n    update(options: Options) {\n      initialize(options)\n    },\n    destroy() {\n      resize_observer.unobserve(canvas)\n\n      canvas.removeEventListener('pointerdown', onpointerdown)\n      canvas.removeEventListener('pointerup', onpointerend)\n      canvas.removeEventListener('pointercancel', onpointerend)\n      canvas.removeEventListener('pointermove', onpointermove)\n      canvas.removeEventListener('wheel', onwheel)\n    }\n  }\n}\n"],"mappings":"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","names":["distance","p1","p2","midpoint","subtract","panzoom","canvas","options","dpr","ctx","minZoom","width","height","render","padding","maxZoom","view_width","view_height","initialize","resize_observer","nodes","rect","prev","toImageSpace","transform","middle","rerender","pointers","onpointerdown","event","point","pointFromEvent","onpointerend","onpointermove","diff","moveBy","prev_points","prev_p1","prev_p2","prev_middle","prev_dist","points","dist","zoom","zoomOn","onwheel","z","delta","scale","value","min_scale","max_scale","x","y"]}